name: 🔍 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  pre-checks:
    name: 🚀 Pre-checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Install Make
      run: sudo apt-get update && sudo apt-get install -y make
      
    - name: 📋 Create .env file
      run: |
        cp .env.example .env
        # Configure with CI values
        sed -i 's/192.168.1.100/localhost/g' .env
        sed -i 's/your_password/ci_password/g' .env
        
    - name: ✅ Run pre-check
      run: make pre-check
      
    - name: 📊 Validate Makefile syntax
      run: |
        # Check if all make targets are valid
        make --dry-run help > /dev/null
        echo "✅ Makefile syntax is valid"

  docker-compose-validation:
    name: 🐳 Docker Compose Validation  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📋 Create .env file
      run: |
        cp .env.example .env
        sed -i 's/192.168.1.100/localhost/g' .env
        
    - name: ✅ Validate Docker Compose files
      run: |
        # Try both docker compose and docker-compose for compatibility
        if command -v docker &> /dev/null && docker compose version &> /dev/null; then
          docker compose config > /dev/null
        elif command -v docker-compose &> /dev/null; then
          docker-compose config > /dev/null
        else
          echo "❌ Neither docker compose nor docker-compose found"
          exit 1
        fi
        echo "✅ Docker Compose configuration is valid"
        
    - name: 🔍 Check for security issues
      run: |
        # Check for exposed secrets (excluding known safe patterns)
        if grep -r "password.*=" . --exclude-dir=.git --exclude="*.md" --exclude-dir=scripts --exclude-dir=.githooks | grep -v ".env" | grep -v ".env.example" | grep -v "password = ''" | grep -v "password=''" | grep -v "NotebookApp.password=''" | grep -v 'smtp_password = $'; then
          echo "❌ Potential exposed secrets found"
          exit 1
        fi
        echo "✅ No exposed secrets found"

  makefile-tests:
    name: 🧪 Makefile Commands Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y make curl wget
        
    - name: 📋 Create .env file
      run: |
        cp .env.example .env
        sed -i 's/192.168.1.100/localhost/g' .env
        
    - name: 🧪 Test essential commands
      run: |
        echo "Testing make commands..."
        make help
        make pre-check
        # Test dry-run of available commands
        make --dry-run clean
        make --dry-run backup-all
        echo "✅ Essential commands working"

  documentation-check:
    name: 📖 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Check documentation structure
      run: |
        # Check if required files exist
        required_files=(
          "README.md"
          "CONTRIBUTING.md" 
          "CODE_OF_CONDUCT.md"
          "docs/commands.md"
          "docs/troubleshooting.md"
          "docs/architecture.md"
        )
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        echo "✅ All required documentation files exist"
        
    - name: 🔗 Check for broken links
      run: |
        # Simple check for markdown links
        if grep -r "\[.*\](.*)" docs/ README.md | grep -E "\[.*\]\(\.\/.*\)" | while read -r line; do
          link=$(echo "$line" | sed -n 's/.*\[\(.*\)\](\(.*\)).*/\2/p')
          if [[ -f "$link" ]] || [[ "$link" =~ ^https?:// ]]; then
            continue
          else
            echo "❌ Broken link found: $link in $line"
            exit 1
          fi
        done; then
          echo "✅ No broken links found"
        fi

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: � Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: �🔍 Install security tools
      run: |
        pip install safety bandit
        
    - name: 🛡️ Python dependency vulnerability scan
      run: |
        echo "🔍 Scanning Python dependencies for known vulnerabilities..."
        
        # Scan main requirements
        if [ -f "airflow/requirements.txt" ]; then
          echo "📋 Scanning airflow/requirements.txt..."
          safety check --file airflow/requirements.txt --output json > safety-report.json || true
          
          # Check if critical vulnerabilities found
          CRITICAL_COUNT=$(cat safety-report.json | grep -o '"vulnerability_id"' | wc -l)
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "⚠️  Found $CRITICAL_COUNT potential vulnerabilities"
            echo "📊 Detailed report:"
            safety check --file airflow/requirements.txt || true
            
            # Don't fail on low/medium severity issues
            echo "ℹ️  Note: Review vulnerabilities but continuing CI (not failing on medium/low)"
          else
            echo "✅ No critical vulnerabilities found in Python dependencies"
          fi
        fi
        
    - name: 🔍 Static security analysis (Bandit)
      run: |
        echo "🔍 Running static security analysis on Python code..."
        
        # Scan Python files for security issues
        find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" | head -10 > python_files.txt
        
        if [ -s python_files.txt ]; then
          echo "📁 Found Python files to scan:"
          cat python_files.txt
          
          # Run bandit with medium severity threshold
          bandit -r . -f json -o bandit-report.json -ll || true
          
          # Show summary but don't fail on warnings
          echo "📊 Security scan summary:"
          bandit -r . -f txt -ll || echo "⚠️  Some security warnings found (review recommended)"
        else
          echo "ℹ️  No Python files found to scan"
        fi
      continue-on-error: true
        
    - name: 🐳 Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
        
    - name: 📊 Upload security scan results
      uses: github/codeql-action/upload-sarif@v4
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: 📋 Security summary
      if: always()
      run: |
        echo "🔒 Security Scan Summary"
        echo "========================"
        echo "✅ Python dependency scan: Completed"
        echo "✅ Static analysis: Completed"  
        echo "✅ Docker scan: Completed"
        echo ""
        echo "ℹ️  Note: This job provides security insights but won't fail CI"
        echo "ℹ️  Critical vulnerabilities should be addressed promptly"
        echo "ℹ️  Medium/Low severity issues can be reviewed and planned"

  integration-test:
    name: 🔗 Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📋 Create .env file
      run: |
        cp .env.example .env
        sed -i 's/192.168.1.100/localhost/g' .env
        
    - name: 🚀 Start minimal environment
      run: |
        # Start only essential services for testing
        timeout 300 make lab || true
        sleep 30
        
    - name: 🔍 Check services health
      run: |
        # Check if essential services are responding
        if command -v docker &> /dev/null && docker compose version &> /dev/null; then
          docker compose ps
        elif command -v docker-compose &> /dev/null; then
          docker-compose ps
        fi
        # Add specific health checks here
        
    - name: 🛑 Cleanup
      if: always()
      run: |
        make clean || true

  conventional-commits:
    name: 📝 Conventional Commits Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 Check commit messages
      run: |
        # Get commits in this PR
        commits=$(git log --format="%s" origin/main..HEAD)
        
        # Check each commit message
        while IFS= read -r commit; do
          if [[ -z "$commit" ]]; then
            continue
          fi
          
          # Skip merge commits
          if [[ "$commit" =~ ^Merge[[:space:]] ]]; then
            echo "⏭️ Skipping merge commit: $commit"
            continue
          fi
          
          # Check conventional commit format
          if ! echo "$commit" | grep -E "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
            echo "❌ Invalid commit message: $commit"
            echo "Use format: <type>[scope]: <description>"
            echo "Examples:"
            echo "  feat: add new feature"
            echo "  fix: resolve bug in authentication"  
            echo "  docs: update installation guide"
            exit 1
          fi
        done <<< "$commits"
        
        echo "✅ All commit messages follow Conventional Commits"

  notify-success:
    name: 🎉 Success Notification
    runs-on: ubuntu-latest
    needs: [pre-checks, docker-compose-validation, makefile-tests, documentation-check, security-scan]
    if: success()
    
    steps:
    - name: 🎉 All checks passed
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Pre-checks: OK"
        echo "✅ Docker Compose: OK" 
        echo "✅ Makefile: OK"
        echo "✅ Documentation: OK"
        echo "✅ Security: OK"